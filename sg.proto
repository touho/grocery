syntax = "proto3";

package speechgrinder.sgapi.v1;

service Slu {
    rpc Stream(stream SluRequest)
        returns (stream SluResponse) {}
}

message SluRequest {
    oneof streaming_request {
        SluConfig config = 1;
        SluEvent event = 2;
        bytes audio = 3;
    }
}

message SluConfig {
    enum Encoding {
        LINEAR16 = 0;
    }
    Encoding encoding = 1;
    int32 channels = 2;
    int32 sample_rate_hertz = 3;
    string language_code = 4;
}

message SluEvent {
    enum Event {
        START = 0;
        STOP = 1;
    }
    Event event = 1;
}

message SluResponse {
    oneof streaming_response {
        SluStarted started = 1;
        Utterance utterance = 2;
        SluFinished finished = 3;
    }
}

message SluStarted {
    string utterance_id = 1;
}

message SluFinished {
    string utterance_id = 1;
    SluError error = 2;
}

message SluError {
    string code = 1;
    string message = 2;
}

message Utterance {
    string utterance_id = 1;
    string type = 2;
    string language_code = 3;
    repeated Alternative alternatives = 4;
}

message Alternative {
    float confidence = 1;
    repeated Token tokens = 2;
}

message Token {
    enum TokenPosition {
        outsideOf = 0;
        startOf = 1;
        insideOf = 2;
    }
    string text = 1;
    string text_with_trailing_space = 2; // if token not trailed by space then is equal to text
    string lemma = 3;
    string pos = 4;
    string tag = 5;
    string case = 6;
    string number = 7;
    string entity_type = 8;
    TokenPosition position_in_entity = 9;
    bool is_segment_start = 10;
    int32 trailing_silence = 11;  // measured in centiseconds
}

/* Authentication and identity service */
service Identity {
    rpc Login(LoginRequest) returns (LoginResponse) {}
}

message LoginRequest {
    string device_id = 1;
    string app_id = 2;
}

message LoginResponse {
    string token = 1;
}
